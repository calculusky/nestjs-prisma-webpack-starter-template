// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fulltextIndex"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//User
enum UserType {
  ADMIN
  MANUFACTURER
  SUPPLIER
  BUYER
}

enum ReferralStatus {
  PENDING
  COMPLETED
}

model User {
  id                   Int                   @id @default(autoincrement())
  firstName            String
  lastName             String
  identifier           String                @unique
  email                String                @unique
  phone                String?
  password             String
  userType             UserType
  roleId               Int
  referralCode         String                @unique
  referrerId           Int?
  photo                String?
  planId               Int
  whatsappNumber       String?
  sessionToken         String?               @db.VarChar(255)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  passwordResetRequest PasswordResetRequest?
  role                 Role                  @relation(fields: [roleId], references: [id])

  referees User[] @relation(name: "referral")
  referrer User?  @relation(name: "referral", fields: [referrerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([roleId])
  @@index([referrerId])
  @@index([planId])
  @@fulltext([firstName, lastName])
  @@map("Users")
}

//Password Reset request
model PasswordResetRequest {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("PasswordResetRequests")
}

//Roles
model Role {
  id           Int              @id @default(autoincrement())
  name         String           @unique
  slug         String           @unique
  isAppDefault Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  users        User[]
  permissions  RolePermission[]

  @@fulltext([name])
  @@map("Roles")
}

//Permission
model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@map("Permissions")
}

//RolePermission
model RolePermission {
  roleId       Int
  permissionId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("RolePermissions")
}
